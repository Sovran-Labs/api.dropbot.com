import mongoose from "mongoose";
export declare const TrxSchema: mongoose.Model<{
    blockchain: string;
    actionType: string;
    amountIn: string;
    amountOut: string;
    botId: string;
    gasSpent: string;
    hashId: string;
    protocol: string;
    status: string;
    timestamp: Date;
    tokenIn: string;
    tokenOut: string;
    valueIn: string;
    valueOut: string;
    walletId: string;
}, {}, {}, {}, mongoose.Document<unknown, {}, {
    blockchain: string;
    actionType: string;
    amountIn: string;
    amountOut: string;
    botId: string;
    gasSpent: string;
    hashId: string;
    protocol: string;
    status: string;
    timestamp: Date;
    tokenIn: string;
    tokenOut: string;
    valueIn: string;
    valueOut: string;
    walletId: string;
}> & {
    blockchain: string;
    actionType: string;
    amountIn: string;
    amountOut: string;
    botId: string;
    gasSpent: string;
    hashId: string;
    protocol: string;
    status: string;
    timestamp: Date;
    tokenIn: string;
    tokenOut: string;
    valueIn: string;
    valueOut: string;
    walletId: string;
} & {
    _id: mongoose.Types.ObjectId;
}, mongoose.Schema<any, mongoose.Model<any, any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    blockchain: string;
    actionType: string;
    amountIn: string;
    amountOut: string;
    botId: string;
    gasSpent: string;
    hashId: string;
    protocol: string;
    status: string;
    timestamp: Date;
    tokenIn: string;
    tokenOut: string;
    valueIn: string;
    valueOut: string;
    walletId: string;
}, mongoose.Document<unknown, {}, mongoose.FlatRecord<{
    blockchain: string;
    actionType: string;
    amountIn: string;
    amountOut: string;
    botId: string;
    gasSpent: string;
    hashId: string;
    protocol: string;
    status: string;
    timestamp: Date;
    tokenIn: string;
    tokenOut: string;
    valueIn: string;
    valueOut: string;
    walletId: string;
}>> & mongoose.FlatRecord<{
    blockchain: string;
    actionType: string;
    amountIn: string;
    amountOut: string;
    botId: string;
    gasSpent: string;
    hashId: string;
    protocol: string;
    status: string;
    timestamp: Date;
    tokenIn: string;
    tokenOut: string;
    valueIn: string;
    valueOut: string;
    walletId: string;
}> & {
    _id: mongoose.Types.ObjectId;
}>>;
//# sourceMappingURL=trx.d.ts.map