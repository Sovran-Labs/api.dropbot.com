import { v4 as uuid } from 'uuid';
import { Blockchains, ChainIds } from '../Blockchains';
import { InputValueTypes } from '../InputValueTypes';
import { As7bActions } from '../As7bActions';
import { GeneralActions } from '../GeneralActions';
import { IPreSequenceCheckTemplate } from '@/src/ts/interfaces/actions/actionSequenceTemplates/FLOW_7/presequenceCheck';
import { IPreSyncswapSwapCheckTemplate } from '@/src/ts/interfaces/actions/actionSequenceTemplates/FLOW_7/presyncswapSwapCheck';
import { ISyncswapSwapTemplate } from '@/src/ts/interfaces/actions/actionSequenceTemplates/FLOW_7/syncswapSwap';
import { IPostSyncswapSwapCheckTemplate } from '@/src/ts/interfaces/actions/actionSequenceTemplates/FLOW_7/postsyncswapSwapCheck';
import { IPostSequenceCheckTemplate } from '@/src/ts/interfaces/actions/actionSequenceTemplates/FLOW_7/postsequenceCheck';

export default function buildActionSequenceFromTemplate7a() {
  const actionUuids = new Array(14).fill(1).map(() => uuid());

  const actions = [
    {
      actionUuid: actionUuids[0],
      name: GeneralActions.SYNC_BALANCES_WITH_BLOCKCHAIN,
      dependencies: {
        account: {
          type: InputValueTypes.STATE,
          key: 'global.account',
        },
        blockchains: {
          type: InputValueTypes.STATE,
          key: 'global.blockchains',
        },
      },
    },
    {
      actionUuid: actionUuids[1],
      name: As7bActions.AS7b_PRE_SEQUENCE_CHECK,
      dependencies: {
        blockchain: {
          type: InputValueTypes.HARDCODED,
          val: Blockchains.ZKSYNC,
        },
        account: {
          type: InputValueTypes.STATE,
          key: 'global.account',
        },
        balances: {
          type: InputValueTypes.STATE,
          key: 'global.balances',
        },
      },
    },
    {
      actionUuid: actionUuids[2],
      name: As7bActions.AS7b_PRE_SYNCSWAP_SWAP_CHECK,
    },
    {
      actionUuid: actionUuids[3],
      name: As7bActions.AS7b_SYNCSWAP_SWAP,
      dependencies: {
        account: {
          type: InputValueTypes.STATE,
          key: 'global.account',
        },
        blockchain: {
          type: InputValueTypes.HARDCODED,
          val: Blockchains.ZKSYNC,
        },
        wethAddress: {
          type: InputValueTypes.CONFIG,
          key: 'ZKSYNC.wethAddress',
        },
        percentOfTokenABalance: {
          type: InputValueTypes.RANGE,
          lowerBound: 5,
          upperBound: 10,
        },
        tokenA: {
          type: InputValueTypes.HARDCODED,
          // SOURCE: https://polygonscan.com/token/0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270#code
          // SOURCE: WMATIC on Polygon is https://docs.uniswap.org/contracts/v3/reference/deployments
          val: {
            chainId: ChainIds.ZKSYNC,
            address: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',
            decimals: 18,
            symbol: 'WMATIC',
            name: 'Wrapped Matic',
          },
        },
        // SOURCE: https://polygonscan.com/token/0x7ceb23fd6bc0add59e62ac25578270cff1b9f619
        tokenB: {
          type: InputValueTypes.HARDCODED,
          val: {
            chainId: ChainIds.ZKSYNC,
            address: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
            decimals: 18,
            symbol: 'WETH',
            name: 'Wrapped Ether',
          },
        },
      },
    },
    {
      actionUuid: actionUuids[4],
      name: As7bActions.AS7b_AWAIT_BLOCKS,
      dependencies: {
        blockchain: {
          type: InputValueTypes.HARDCODED,
          val: Blockchains.ZKSYNC,
        },
        amountOfBlocks: {
          type: InputValueTypes.HARDCODED,
          val: 10,
        },
      },
    },
    {
      actionUuid: actionUuids[5],
      name: As7bActions.AS7b_POST_SYNCSWAP_SWAP_CHECK,
    },
    {
      actionUuid: actionUuids[6],
      name: As7bActions.AS7b_PRE_SYNCSWAP_SWAP_CHECK,
    },
    {
      actionUuid: actionUuids[7],
      name: As7bActions.AS7b_SYNCSWAP_SWAP,
      dependencies: {
        account: {
          type: InputValueTypes.STATE,
          key: 'global.account',
        },
        blockchain: {
          type: InputValueTypes.HARDCODED,
          val: Blockchains.ZKSYNC,
        },
        wethAddress: {
          type: InputValueTypes.CONFIG,
          key: 'ZKSYNC.wethAddress',
        },
        percentOfTokenABalance: {
          type: InputValueTypes.RANGE,
          lowerBound: 5,
          upperBound: 10,
        },
        tokenA: {
          type: InputValueTypes.HARDCODED,
          // SOURCE: https://polygonscan.com/token/0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270#code
          // SOURCE: WMATIC on Polygon is https://docs.uniswap.org/contracts/v3/reference/deployments
          val: {
            chainId: ChainIds.ZKSYNC,
            address: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',
            decimals: 18,
            symbol: 'WMATIC',
            name: 'Wrapped Matic',
          },
        },
        // SOURCE: https://polygonscan.com/token/0x7ceb23fd6bc0add59e62ac25578270cff1b9f619
        tokenB: {
          type: InputValueTypes.HARDCODED,
          val: {
            chainId: ChainIds.ZKSYNC,
            address: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
            decimals: 18,
            symbol: 'WETH',
            name: 'Wrapped Ether',
          },
        },
      },
    },
    {
      actionUuid: actionUuids[8],
      name: As7bActions.AS7b_AWAIT_BLOCKS,
      dependencies: {
        blockchain: {
          type: InputValueTypes.HARDCODED,
          val: Blockchains.ZKSYNC,
        },
        amountOfBlocks: {
          type: InputValueTypes.HARDCODED,
          val: 10,
        },
      },
    },
    {
      actionUuid: actionUuids[9],
      name: As7bActions.AS7b_POST_SYNCSWAP_SWAP_CHECK,
    },
    {
      actionUuid: actionUuids[10],
      name: As7bActions.AS7b_PRE_SYNCSWAP_SWAP_CHECK,
    },
    {
      actionUuid: actionUuids[11],
      name: As7bActions.AS7b_SYNCSWAP_SWAP,
      dependencies: {
        account: {
          type: InputValueTypes.STATE,
          key: 'global.account',
        },
        blockchain: {
          type: InputValueTypes.HARDCODED,
          val: Blockchains.ZKSYNC,
        },
        wethAddress: {
          type: InputValueTypes.CONFIG,
          key: 'ZKSYNC.wethAddress',
        },
        percentOfTokenABalance: {
          type: InputValueTypes.RANGE,
          lowerBound: 5,
          upperBound: 10,
        },
        tokenA: {
          type: InputValueTypes.HARDCODED,
          // SOURCE: https://polygonscan.com/token/0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270#code
          // SOURCE: WMATIC on Polygon is https://docs.uniswap.org/contracts/v3/reference/deployments
          val: {
            chainId: ChainIds.ZKSYNC,
            address: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',
            decimals: 18,
            symbol: 'WMATIC',
            name: 'Wrapped Matic',
          },
        },
        // SOURCE: https://polygonscan.com/token/0x7ceb23fd6bc0add59e62ac25578270cff1b9f619
        tokenB: {
          type: InputValueTypes.HARDCODED,
          val: {
            chainId: ChainIds.ZKSYNC,
            address: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
            decimals: 18,
            symbol: 'WETH',
            name: 'Wrapped Ether',
          },
        },
      },
    },
    {
      actionUuid: actionUuids[12],
      name: As7bActions.AS7b_AWAIT_BLOCKS,
      dependencies: {
        blockchain: {
          type: InputValueTypes.HARDCODED,
          val: Blockchains.ZKSYNC,
        },
        amountOfBlocks: {
          type: InputValueTypes.HARDCODED,
          val: 10,
        },
      },
    },
    {
      actionUuid: actionUuids[13],
      name: As7bActions.AS7b_POST_SYNCSWAP_SWAP_CHECK,
    },
    {
      actionUuid: actionUuids[14],
      name: As7bActions.AS7b_POST_SEQUENCE_CHECK,
      dependencies: {
        blockchain: {
          type: InputValueTypes.HARDCODED,
          val: Blockchains.ZKSYNC,
        },
        preCheckMaticBalance: {
          type: InputValueTypes.STATE,
          key: `actionLog.${actionUuids[1]}.metadata.maticBalance`,
        },
        wrapInTxnFee: {
          type: InputValueTypes.STATE,
          key: `actionLog.${actionUuids[4]}.metadata.txnFee`,
        },
        wrapOutTxnFee: {
          type: InputValueTypes.STATE,
          key: `actionLog.${actionUuids[8]}.metadata.txnFee`,
        },
        account: {
          type: InputValueTypes.STATE,
          key: 'global.account',
        },
      },
    },
  ];

  return {
    actions,
    id: '7b',
    description: 'SyncSwap swaps on ZkSync',
  };
}
